
/**
 * HW 03 Double Linked List: Write a class called DoubleLinkedList which is a generic double linked
 * list. This list is similar to the single linked list that was show in class except that each node
 * in addition to having size and next now has prev.
 * 
 * @author Charissa Pichai
 * @version 9/19/2015
 *
 */
public class DoubleLinkedList<E> { 
  public class Node<E> {
    private E elem;
    private Node<E> next; 
    private Node<E> prev; 

    /**
     * Default constructor.
     */
    public Node() { 
      elem = null;
      next = null;
      prev = null;
    }
    /**
     * Initial value constructor.
     * @param elem The element.
     * @param next The next node.
     * @param prev The previous node.
     */
    public Node(E elem, Node<E> next, Node<E> prev) {
      this.elem = elem;
      this.next = next;
      this.prev = prev;
    }
    /**
     * Returns the next node.
     * @return the next node.
     */
    public Node<E> getNext() {
      return this.next;
    }
    /**
     * Returns the previous node.
     * @return the previous node.
     */
    public Node<E> getPrev() {
      return this.prev;
    }
    /**
     * Return's the node's element
     * @return the element.
     */
    public E getElem() {
      return this.elem;
    }
    /**
     * Sets the next node to the node that is passed in.
     * @param nodeNext the new node that will represent this's next node.
     */
    public void setNext(Node<E> nodeNext) {
      this.next = nodeNext;
    }
    /**
     * Sets the previous node to the node that is passed in.
     * @param nodePrev the new node that will represent this's previous node.
     */
    public void setPrev(Node<E> nodePrev) {
      this.prev = nodePrev;
    } 
    /**
     * Sets or resets the element.
     * @param newElem the value of the new element.
     */
    public void setElem(E newElem) {
      this.elem = newElem;
    }
  }
  
  private Node<E> head; 
  private Node<E> last;             
  private int size;
  
  /**
   * Default constructor for the DoubleLinkedList. 
   */
  public DoubleLinkedList() {
    head = new Node<E>();
    last = head; 
    size = 0;             
  }

  /**
   * Returns the size of the list.
   * @return the size of the list.
   */
  public int size() {
    return size;
  }

  /**
   * Inserts a new element into the list.
   * 
   * @param index The place to insert the new element.
   * @param elem The element to insert.
   */
  public void insert(int index, E elem) {
    if (index < 0 || index > size) {
      throw new ListIndexOutOfBoundsException();
    } else if (head.getElem() == null) {
      Node<E> newNode = new Node<E>();
      newNode.setElem(elem);
      size++;
      head = newNode;
      last = head;
      return;
    } else if (index == 0) {
      System.out.println("Entering case where index == 0");
      Node<E> temp = new Node<E>();
      temp.setElem(elem);
      head.setPrev(temp);
      head = temp;
      size++;
      return;
    } else if (index == size) {

      Node<E> newNode = new Node<E>();
      newNode.setElem(elem);
      last.setNext(newNode);
      newNode.setPrev(last);
      last = newNode;
      size++;
    } else {
      Node<E> iter = head;
      for (int i = 0; i < index - 1; i++) {
        System.out.println("Entering for loop for normal case.");
        System.out.println("i is " + i);
        System.out.println("iter's element is " + iter.getElem());
        iter = iter.getNext();
      }
      Node<E> newNode = new Node<E>();
      newNode.setElem(elem);
      System.out.println("Normal case where index != size.");
      newNode.setNext(iter.getNext());
      newNode.setPrev(iter);
      newNode.getNext().setPrev(newNode);
      iter.setNext(newNode);
      size++;
    }
  }
  /**
   * Inserts a new element at the end of the list (index = size)
   * @param elem The element to insert.
   */
  public void append(E elem) {
    insert(size, elem);
  }
  /**
   * Retrieve an element from the list.
   * 
   * @param index The place from which to retrieve an element.
   * @return The specified element.
   */
  public E get(int index) {
    if (index >= size || index < 0) {
      throw new ListIndexOutOfBoundsException();
    }
    Node<E> iter = head;
    for (int i = 0; i < index; i++) { 
      if (iter.getNext() == null) {
        System.out.println("There is a problem when i == " + i + " and index == " + index);
      }
      iter = iter.getNext();
    }
    return iter.getElem();
  }

  /**
   * Deletes an element at the specified location.
   * 
   * @param index The position to delete from the list.
   * @return THe element that was deleted.
   */
  public E delete(int index) {
    if (index >= size || index < 0) {
      throw new ListIndexOutOfBoundsException();
    }
    /* Three cases: 1) Deleting the first element in the list 
     * 2) Deleting from the last element in the list 
     * 3) Normal deletion */
    E toReturn;
    if (index == 0) {
      toReturn = head.getElem();
      head = head.getNext();
      size--;
      return toReturn;
    } else if (index == size) {
      toReturn = last.getElem();
      last = last.getPrev();
      size--;
      return toReturn;
    } else {
      Node<E> iter = head;
      for (int i = 0; i < index; i++) {
        iter = iter.getNext();
      }
      toReturn = iter.getElem();
      iter.getNext().setPrev(iter.getPrev());
      iter.getPrev().setNext(iter.getNext());
      size--;
      return toReturn;
    }
  }
  /**
   * Returns the elements of the list.
   * @return The elements of the list separated by spaces, as a String.
   */
  public String toString() {
    String toReturn = "This is the beginning";
    System.out.println(toReturn);
    Node<E> iter = head;
    for (int i = 0; i < size - 1; i++) {
    
      toReturn += iter.getElem();
      toReturn += " ";
      iter = iter.getNext();
    }
    return toReturn;
  }

  /**
   * @param elem The element to find.
   * @return true if the element is contained in the list, false otherwise.
   */
  public boolean inList(E elem) { 
    Node<E> iter = head; 
    boolean flag = false;

    for (int i = 0; i < size; i++) {
      if ((iter.getElem()).equals(elem)) {
        flag = true;
      }
      iter = iter.getNext();
    }
    return flag;
  }
}
